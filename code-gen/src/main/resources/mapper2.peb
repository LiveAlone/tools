<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code Generated by terminus code gen
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="{{singleClass.className}}">

    <resultMap id="{{singleClass.className}}Map" type="{{singleClass.className}}">
{% for field in singleClass.fields %}
        <result column="{{field.columnName}}" property="{{field.fieldName}}"/>
{% endfor %}
    </resultMap>

    <sql id="tb"> {{singleClass.tableName}} </sql>

    <sql id="cols_all">
        {{ singleClass.fields[0].columnName }}, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        {{ singleClass.fields | escapeJoin }}
    </sql>

    <sql id="vals">
        {{ singleClass.fields | wrapJoin }}
    </sql>

    <sql id="criteria">
{% for field in singleClass.fields %}
        <if test="{{field.fieldName}} != null">and `{{field.columnName}}` = {{wrap(field.fieldName)}} </if>
{% endfor %}
{% if fieldNames contains "createdAt" %}
        <if test="beginCreatedAt != null">AND <![CDATA[ created_at >= #{beginCreatedAt} ]]> </if>
        <if test="endCreatedAt != null">AND <![CDATA[ created_at <= #{endCreatedAt} ]]> </if>
{% endif %}
{% if fieldNames contains "updatedAt" %}
        <if test="beginUpdatedAt != null">AND <![CDATA[ updated_at >= #{beginUpdatedAt} ]]> </if>
        <if test="endUpdatedAt != null">AND <![CDATA[ updated_at <= #{endUpdatedAt} ]]> </if>
{% endif %}
    </sql>

    <insert id="create" parameterType="{{singleClass.className}}" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
            VALUES (<include refid="vals" />)
    </insert>

    <insert id="creates" parameterType="list">
        INSERT INTO <include refid="tb"/>
        ( <include refid="cols_exclude_id"/> )
        VALUES
        <foreach collection="list" item="i" separator=",">
        ({{ singleClass.fields | foreachIJoin }})
        </foreach>
    </insert>

    <delete id="delete" parameterType="Long">
        DELETE FROM <include refid="tb"/> WHERE
        {{ singleClass.fields[0].columnName }}={{wrap(singleClass.fields[0].fieldName)}}

    </delete>

    <delete id="deletes" parameterType="list">
        DELETE FROM <include refid="tb"/> WHERE
        {{ singleClass.fields[0].columnName }} in
        <foreach collection="list" close=")" open="(" separator="," item="i">
            #{i}
        </foreach>
    </delete>

    <select id="findById" parameterType="long" resultMap="{{singleClass.className}}Map" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE {{ singleClass.fields[0].columnName }}={{wrap(singleClass.fields[0].fieldName)}}
    </select>

    <select id="findByIds" parameterType="list" resultMap="{{singleClass.className}}Map" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE {{ singleClass.fields[0].columnName }} in
        <foreach collection="list" close=")" open="(" separator="," item="i">
            #{i}
        </foreach>
    </select>

    <select id="list" parameterType="map" resultMap="{{singleClass.className}}Map">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        <if test="orderBy != null"> ORDER BY #{orderBy}</if>
        <if test="desc != null"> DESC </if>
    </select>

    <select id="count" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" resultMap="{{singleClass.className}}Map">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        <if test="orderBy != null"> ORDER BY #{orderBy}</if>
        <if test="desc != null"> DESC </if>
        LIMIT #{offset}, #{limit}
    </select>

    <update id="update" parameterType="{{singleClass.className}}">
        UPDATE <include refid="tb"/>
        <set>
        updated_at = now()
{% for field in singleClass.fields %}
{% if not( (field.fieldName equals "createdAt") or (field.fieldName equals "updatedAt")) %}
        <if test="{{field.fieldName}} != null" > ,`{{field.columnName}}` = {{ wrap(field.fieldName) }}</if>
{% endif %}
{% endfor %}
        </set>
        WHERE {{ singleClass.fields[0].columnName }}={{wrap(singleClass.fields[0].fieldName)}}
    </update>
</mapper>